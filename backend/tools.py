from typing import List
from wolframalpha import Client
import os
import json
from dotenv import load_dotenv
from llm import json_op_model, basic_model
from prompts import parse_wolfram_res_prompt
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
import logging
# import nest_asyncio
# nest_asyncio.apply()

load_dotenv()

WOLFRAM_APP_ID = os.getenv('WOLFRAM_APP_ID')
wolf_client = Client(WOLFRAM_APP_ID)


def non_math_tool(question: str) -> str:
    """
    This tool uses the Gemini model to answer non-mathematical questions.

    Args:
        question: The question to be answered.

    Returns:
        The answer generated by the Gemini model.
    """
    query = f"Answer the following question: {question}"
    tool_model = basic_model()
    ans = tool_model.generate_content(query)
    print(question, " : ",ans.text)
    return ans.text


def basic_math_tool(operation: str, num1: float, num2: float) -> float:
    """Performs basic arithmetic operations on two numbers only.

    Args:
        operation: The operation to perform ('add', 'subtract', 'multiply', 'divide', 'root', 'power').
        num1: The first number.
        num2: The second number.

    Returns:
        The result of the operation.
    """
    result = None

    if operation == 'add':
        result = num1 + num2
    elif operation == 'subtract':
        result = num1 - num2
    elif operation == 'multiply':
        result = num1 * num2
    elif operation == 'divide':
        if num2 == 0:
            result = "Cannot divide by zero"
        else:
            result = num1 / num2
    elif operation == 'root':
        result = num1 ** (1/num2)
    elif operation == 'power':
        result = num1 ** num2
    else:
        result = "Invalid operation"
    print(operation, f"({num1}, {num2})", " : ", result)
    return result


def advanced_math_tool(operation: str, expressions: List[str]) -> str:
    """Performs all mathematical operations.

    Args:
        operation: Mathematical operation to perform: ['Integrate', 'Differentiate', 'Solve']
        expressions: List of function or expression to be solved or plotted.

    Returns:
        The result of the operation.
    """

    question = f"{operation} {', '.join(expressions)}"
    plot_name = ""

    response = wolf_client.query(question)
    # logging.debug(f'Extracted questions response: {response}')
    res = json.dumps(response)
    res = json.loads(res)

    # Extracting solution and plot from wolfram response
    api_extract_model = json_op_model()
    prompt = parse_wolfram_res_prompt(res)
    result = api_extract_model.generate_content(prompt)
    result = json.loads(result.text)

    logging.debug(f'Extracted api response: {result}')

    answer = result['solution']
    # if 'plot_url' in result:
    #     plot = requests.get(result['plot_url'])
    #     image = Image.open(BytesIO(plot.content))
    #     plot_name = f"plot_{question}.png"
    #     image.save(plot_name)
    #     plt.imshow(image)
    #     plt.axis('off')
    #     plt.show()
    return answer
